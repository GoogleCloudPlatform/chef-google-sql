# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

require 'spec_helper'

# TODO(alexstephen): Reformat tests to use nested describe blocks
# TODO(alexstephen): Add title == name tests
# Test Matrix:
#
# +--------------------------------------------------------+
# | Action  | Exists | Changes | Success | Result          |
# +--------------------------------------------------------+
# | create  | Y      | Y       | Y       | Edit            |
# | create  | Y      | Y       | N       | Fail            |
# | create  | Y      | N       | Y       | Fetch (no-op)   |
# | create  | Y      | N       | N       | Fail            |
# | create  | N      | Y       | Y       | Create          |
# | create  | N      | Y       | N       | Fail            |
# +--------------------------------------------------------+
# | delete  | Y      | Y       | Y       | Delete          |
# | delete  | Y      | Y       | N       | Fail            |
# | delete  | N      | Y       | Y       | Fail (no delete)|
# | delete  | N      | Y       | N       | Fail            |
# +--------------------------------------------------------+
# TODO(alexstephen): Add tests for manage
# TODO(alexstephen): Add tests for modify
context 'gsql_instance' do
  context 'ensure == present' do
    context 'resource exists' do
      # Ensure present: resource exists, no change
      context 'no changes == no action' do
        # Ensure present: resource exists, no change, no name
        context 'title == name' do
          # Ensure present: resource exists, no change, no name, pass
          context 'title == name (pass)' do
            before do
              allow(Time).to receive(:now).and_return(
                Time.new(2017, 1, 2, 3, 4, 5)
              )
              expect_network_get_success 1, name: 'title0'
              expect_network_get_success 2, name: 'title1'
              expect_network_get_success 3, name: 'title2'
            end

            let(:runner) do
              # This path ensures that the current cookbook is
              # loaded for testing.
              # This path will load all other cookbooks in the
              # parent directory.
              # Under most circumstances, this will include the
              # real google-gauth cookbook.
              parent_dir = File.join(File.dirname(__FILE__), '..', '..')
              cookbook_paths = [parent_dir]

              # If there's no real version of the google-gauth ,
              # add in the mocked version so that the tests do not fail.
              # Since cookbooks can have any name, we assume that
              # any directory with the word auth is the google-gauth cookbook.
              cookbook_paths << File.join(File.dirname(__FILE__), 'cookbooks')

              ChefSpec::SoloRunner.new(
                step_into: 'gsql_instance',
                cookbook_path: cookbook_paths,
                platform: 'ubuntu',
                version: '16.04'
              )
            end

            let(:chef_run) do
              apply_recipe(
                <<-MANIFEST
                  gsql_instance 'title0' do
                    action :create
                    backend_type 'FIRST_GEN'
                    connection_name 'test connection_name#0 data'
                    database_version 'MYSQL_5_5'
                    failover_replica({
                      available: true,
                      name: 'test name#0 data'
                    })
                    instance_type 'CLOUD_SQL_INSTANCE'
                    ipv6_address 'test ipv6_address#0 data'
                    master_instance_name 'test master_instance_name#0 data'
                    max_disk_size 399168897
                    region 'test region#0 data'
                    replica_configuration({
                      failover_target: true,
                      mysql_replica_configuration: {
                        ca_certificate: 'test ca_certificate#0 data',
                        client_certificate: 'test client_certificate#0 data',
                        client_key: 'test client_key#0 data',
                        connect_retry_interval: 586223489,
                        dump_file_path: 'test dump_file_path#0 data',
                        master_heartbeat_period: 2641537687,
                        password: 'test password#0 data',
                        ssl_cipher: 'test ssl_cipher#0 data',
                        username: 'test username#0 data',
                        verify_server_certificate: true
                      },
                      replica_names: ['ee', 'ff', 'gg', 'hh'],
                      service_account_email_address: 'test service_account_email_address#0 data'
                    })
                    settings({
                      ip_configuration: {
                        authorized_networks: [
                          {
                            expiration_time: '2018-07-08T02:10:16+00:00',
                            name: 'test name#0 data',
                            value: 'test value#0 data'
                          },
                          {
                            expiration_time: '2067-01-12T04:20:32+00:00',
                            name: 'test name#1 data',
                            value: 'test value#1 data'
                          },
                          {
                            expiration_time: '2115-07-20T06:30:48+00:00',
                            name: 'test name#2 data',
                            value: 'test value#2 data'
                          }
                        ],
                        ipv4_enabled: true,
                        require_ssl: true
                      },
                      tier: 'test tier#0 data'
                    })
                    project 'test project#0 data'
                    credential 'mycred'
                  end

                  gsql_instance 'title1' do
                    action :create
                    backend_type 'SECOND_GEN'
                    connection_name 'test connection_name#1 data'
                    database_version 'MYSQL_5_6'
                    failover_replica({
                      available: false,
                      name: 'test name#1 data'
                    })
                    instance_type 'ON_PREMISES_INSTANCE'
                    ipv6_address 'test ipv6_address#1 data'
                    master_instance_name 'test master_instance_name#1 data'
                    max_disk_size 798337795
                    region 'test region#1 data'
                    replica_configuration({
                      failover_target: false,
                      mysql_replica_configuration: {
                        ca_certificate: 'test ca_certificate#1 data',
                        client_certificate: 'test client_certificate#1 data',
                        client_key: 'test client_key#1 data',
                        connect_retry_interval: 1172446978,
                        dump_file_path: 'test dump_file_path#1 data',
                        master_heartbeat_period: 5283075375,
                        password: 'test password#1 data',
                        ssl_cipher: 'test ssl_cipher#1 data',
                        username: 'test username#1 data',
                        verify_server_certificate: false
                      },
                      replica_names: ['kk', 'll'],
                      service_account_email_address: 'test service_account_email_address#1 data'
                    })
                    settings({
                      ip_configuration: {
                        authorized_networks: [
                          {
                            expiration_time: '2067-01-12T04:20:32+00:00',
                            name: 'test name#1 data',
                            value: 'test value#1 data'
                          },
                          {
                            expiration_time: '2115-07-20T06:30:48+00:00',
                            name: 'test name#2 data',
                            value: 'test value#2 data'
                          },
                          {
                            expiration_time: '2164-01-24T08:41:04+00:00',
                            name: 'test name#3 data',
                            value: 'test value#3 data'
                          },
                          {
                            expiration_time: '2212-07-31T10:51:20+00:00',
                            name: 'test name#4 data',
                            value: 'test value#4 data'
                          },
                          {
                            expiration_time: '2261-02-04T13:01:36+00:00',
                            name: 'test name#5 data',
                            value: 'test value#5 data'
                          }
                        ],
                        ipv4_enabled: false,
                        require_ssl: false
                      },
                      tier: 'test tier#1 data'
                    })
                    project 'test project#1 data'
                    credential 'mycred'
                  end

                  gsql_instance 'title2' do
                    action :create
                    backend_type 'EXTERNAL'
                    connection_name 'test connection_name#2 data'
                    database_version 'MYSQL_5_7'
                    failover_replica({
                      available: true,
                      name: 'test name#2 data'
                    })
                    instance_type 'READ_REPLICA_INSTANCE'
                    ipv6_address 'test ipv6_address#2 data'
                    master_instance_name 'test master_instance_name#2 data'
                    max_disk_size 1197506692
                    region 'test region#2 data'
                    replica_configuration({
                      failover_target: true,
                      mysql_replica_configuration: {
                        ca_certificate: 'test ca_certificate#2 data',
                        client_certificate: 'test client_certificate#2 data',
                        client_key: 'test client_key#2 data',
                        connect_retry_interval: 1758670468,
                        dump_file_path: 'test dump_file_path#2 data',
                        master_heartbeat_period: 7924613063,
                        password: 'test password#2 data',
                        ssl_cipher: 'test ssl_cipher#2 data',
                        username: 'test username#2 data',
                        verify_server_certificate: true
                      },
                      replica_names: ['qq', 'rr', 'ss', 'tt'],
                      service_account_email_address: 'test service_account_email_address#2 data'
                    })
                    settings({
                      ip_configuration: {
                        authorized_networks: [
                          {
                            expiration_time: '2115-07-20T06:30:48+00:00',
                            name: 'test name#2 data',
                            value: 'test value#2 data'
                          },
                          {
                            expiration_time: '2164-01-24T08:41:04+00:00',
                            name: 'test name#3 data',
                            value: 'test value#3 data'
                          }
                        ],
                        ipv4_enabled: true,
                        require_ssl: true
                      },
                      tier: 'test tier#2 data'
                    })
                    project 'test project#2 data'
                    credential 'mycred'
                  end
                MANIFEST
              ) do |recipe_name|
                runner.converge(recipe_name) do
                  cred = Google::CredentialResourceMock.new('mycred',
                                                            runner.run_context)
                  runner.resource_collection.insert(cred)
                end
              end
            end

            context 'gsql_instance[title0]' do
              subject do
                chef_run.find_resource(:gsql_instance, 'title0')
              end

              it { is_expected.to have_attributes(backend_type: 'FIRST_GEN') }

              it { is_expected.to have_attributes(connection_name: 'test connection_name#0 data') }

              it { is_expected.to have_attributes(database_version: 'MYSQL_5_5') }

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'failoverReplica' do
              #   # Add test code here
              # end

              it { is_expected.to have_attributes(instance_type: 'CLOUD_SQL_INSTANCE') }

              it { is_expected.to have_attributes(ipv6_address: 'test ipv6_address#0 data') }

              it do
                is_expected
                  .to have_attributes(master_instance_name: 'test master_instance_name#0 data')
              end

              it { is_expected.to have_attributes(max_disk_size: 399_168_897) }

              it { is_expected.to have_attributes(i_label: 'title0') }

              it { is_expected.to have_attributes(region: 'test region#0 data') }

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'replicaConfiguration' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'settings' do
              #   # Add test code here
              # end
            end

            context 'gsql_instance[title1]' do
              subject do
                chef_run.find_resource(:gsql_instance, 'title1')
              end

              it { is_expected.to have_attributes(backend_type: 'SECOND_GEN') }

              it { is_expected.to have_attributes(connection_name: 'test connection_name#1 data') }

              it { is_expected.to have_attributes(database_version: 'MYSQL_5_6') }

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'failoverReplica' do
              #   # Add test code here
              # end

              it { is_expected.to have_attributes(instance_type: 'ON_PREMISES_INSTANCE') }

              it { is_expected.to have_attributes(ipv6_address: 'test ipv6_address#1 data') }

              it do
                is_expected
                  .to have_attributes(master_instance_name: 'test master_instance_name#1 data')
              end

              it { is_expected.to have_attributes(max_disk_size: 798_337_795) }

              it { is_expected.to have_attributes(i_label: 'title1') }

              it { is_expected.to have_attributes(region: 'test region#1 data') }

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'replicaConfiguration' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'settings' do
              #   # Add test code here
              # end
            end

            context 'gsql_instance[title2]' do
              subject do
                chef_run.find_resource(:gsql_instance, 'title2')
              end

              it { is_expected.to have_attributes(backend_type: 'EXTERNAL') }

              it { is_expected.to have_attributes(connection_name: 'test connection_name#2 data') }

              it { is_expected.to have_attributes(database_version: 'MYSQL_5_7') }

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'failoverReplica' do
              #   # Add test code here
              # end

              it { is_expected.to have_attributes(instance_type: 'READ_REPLICA_INSTANCE') }

              it { is_expected.to have_attributes(ipv6_address: 'test ipv6_address#2 data') }

              it do
                is_expected
                  .to have_attributes(master_instance_name: 'test master_instance_name#2 data')
              end

              it { is_expected.to have_attributes(max_disk_size: 1_197_506_692) }

              it { is_expected.to have_attributes(i_label: 'title2') }

              it { is_expected.to have_attributes(region: 'test region#2 data') }

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'replicaConfiguration' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'settings' do
              #   # Add test code here
              # end
            end
          end

          # Ensure present: resource exists, no change, no name, fail
          context 'title == name (fail)' do
            # TODO(alexstephen): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end

        # Ensure present: resource exists, no change, has name
        context 'title != name' do
          # Ensure present: resource exists, no change, has name, pass
          context 'title != name (pass)' do
            before do
              allow(Time).to receive(:now).and_return(
                Time.new(2017, 1, 2, 3, 4, 5)
              )
              expect_network_get_success 1
              expect_network_get_success 2
              expect_network_get_success 3
            end

            let(:runner) do
              # This path ensures that the current cookbook is
              # loaded for testing.
              # This path will load all other cookbooks in the
              # parent directory.
              # Under most circumstances, this will include the
              # real google-gauth cookbook.
              parent_dir = File.join(File.dirname(__FILE__), '..', '..')
              cookbook_paths = [parent_dir]

              # If there's no real version of the google-gauth ,
              # add in the mocked version so that the tests do not fail.
              # Since cookbooks can have any name, we assume that
              # any directory with the word auth is the google-gauth cookbook.
              cookbook_paths << File.join(File.dirname(__FILE__), 'cookbooks')

              ChefSpec::SoloRunner.new(
                step_into: 'gsql_instance',
                cookbook_path: cookbook_paths,
                platform: 'ubuntu',
                version: '16.04'
              )
            end

            let(:chef_run) do
              apply_recipe(
                <<-MANIFEST
                  gsql_instance 'title0' do
                    action :create
                    backend_type 'FIRST_GEN'
                    connection_name 'test connection_name#0 data'
                    database_version 'MYSQL_5_5'
                    failover_replica({
                      available: true,
                      name: 'test name#0 data'
                    })
                    i_label 'test name#0 data'
                    instance_type 'CLOUD_SQL_INSTANCE'
                    ipv6_address 'test ipv6_address#0 data'
                    master_instance_name 'test master_instance_name#0 data'
                    max_disk_size 399168897
                    region 'test region#0 data'
                    replica_configuration({
                      failover_target: true,
                      mysql_replica_configuration: {
                        ca_certificate: 'test ca_certificate#0 data',
                        client_certificate: 'test client_certificate#0 data',
                        client_key: 'test client_key#0 data',
                        connect_retry_interval: 586223489,
                        dump_file_path: 'test dump_file_path#0 data',
                        master_heartbeat_period: 2641537687,
                        password: 'test password#0 data',
                        ssl_cipher: 'test ssl_cipher#0 data',
                        username: 'test username#0 data',
                        verify_server_certificate: true
                      },
                      replica_names: ['ee', 'ff', 'gg', 'hh'],
                      service_account_email_address: 'test service_account_email_address#0 data'
                    })
                    settings({
                      ip_configuration: {
                        authorized_networks: [
                          {
                            expiration_time: '2018-07-08T02:10:16+00:00',
                            name: 'test name#0 data',
                            value: 'test value#0 data'
                          },
                          {
                            expiration_time: '2067-01-12T04:20:32+00:00',
                            name: 'test name#1 data',
                            value: 'test value#1 data'
                          },
                          {
                            expiration_time: '2115-07-20T06:30:48+00:00',
                            name: 'test name#2 data',
                            value: 'test value#2 data'
                          }
                        ],
                        ipv4_enabled: true,
                        require_ssl: true
                      },
                      tier: 'test tier#0 data'
                    })
                    project 'test project#0 data'
                    credential 'mycred'
                  end

                  gsql_instance 'title1' do
                    action :create
                    backend_type 'SECOND_GEN'
                    connection_name 'test connection_name#1 data'
                    database_version 'MYSQL_5_6'
                    failover_replica({
                      available: false,
                      name: 'test name#1 data'
                    })
                    i_label 'test name#1 data'
                    instance_type 'ON_PREMISES_INSTANCE'
                    ipv6_address 'test ipv6_address#1 data'
                    master_instance_name 'test master_instance_name#1 data'
                    max_disk_size 798337795
                    region 'test region#1 data'
                    replica_configuration({
                      failover_target: false,
                      mysql_replica_configuration: {
                        ca_certificate: 'test ca_certificate#1 data',
                        client_certificate: 'test client_certificate#1 data',
                        client_key: 'test client_key#1 data',
                        connect_retry_interval: 1172446978,
                        dump_file_path: 'test dump_file_path#1 data',
                        master_heartbeat_period: 5283075375,
                        password: 'test password#1 data',
                        ssl_cipher: 'test ssl_cipher#1 data',
                        username: 'test username#1 data',
                        verify_server_certificate: false
                      },
                      replica_names: ['kk', 'll'],
                      service_account_email_address: 'test service_account_email_address#1 data'
                    })
                    settings({
                      ip_configuration: {
                        authorized_networks: [
                          {
                            expiration_time: '2067-01-12T04:20:32+00:00',
                            name: 'test name#1 data',
                            value: 'test value#1 data'
                          },
                          {
                            expiration_time: '2115-07-20T06:30:48+00:00',
                            name: 'test name#2 data',
                            value: 'test value#2 data'
                          },
                          {
                            expiration_time: '2164-01-24T08:41:04+00:00',
                            name: 'test name#3 data',
                            value: 'test value#3 data'
                          },
                          {
                            expiration_time: '2212-07-31T10:51:20+00:00',
                            name: 'test name#4 data',
                            value: 'test value#4 data'
                          },
                          {
                            expiration_time: '2261-02-04T13:01:36+00:00',
                            name: 'test name#5 data',
                            value: 'test value#5 data'
                          }
                        ],
                        ipv4_enabled: false,
                        require_ssl: false
                      },
                      tier: 'test tier#1 data'
                    })
                    project 'test project#1 data'
                    credential 'mycred'
                  end

                  gsql_instance 'title2' do
                    action :create
                    backend_type 'EXTERNAL'
                    connection_name 'test connection_name#2 data'
                    database_version 'MYSQL_5_7'
                    failover_replica({
                      available: true,
                      name: 'test name#2 data'
                    })
                    i_label 'test name#2 data'
                    instance_type 'READ_REPLICA_INSTANCE'
                    ipv6_address 'test ipv6_address#2 data'
                    master_instance_name 'test master_instance_name#2 data'
                    max_disk_size 1197506692
                    region 'test region#2 data'
                    replica_configuration({
                      failover_target: true,
                      mysql_replica_configuration: {
                        ca_certificate: 'test ca_certificate#2 data',
                        client_certificate: 'test client_certificate#2 data',
                        client_key: 'test client_key#2 data',
                        connect_retry_interval: 1758670468,
                        dump_file_path: 'test dump_file_path#2 data',
                        master_heartbeat_period: 7924613063,
                        password: 'test password#2 data',
                        ssl_cipher: 'test ssl_cipher#2 data',
                        username: 'test username#2 data',
                        verify_server_certificate: true
                      },
                      replica_names: ['qq', 'rr', 'ss', 'tt'],
                      service_account_email_address: 'test service_account_email_address#2 data'
                    })
                    settings({
                      ip_configuration: {
                        authorized_networks: [
                          {
                            expiration_time: '2115-07-20T06:30:48+00:00',
                            name: 'test name#2 data',
                            value: 'test value#2 data'
                          },
                          {
                            expiration_time: '2164-01-24T08:41:04+00:00',
                            name: 'test name#3 data',
                            value: 'test value#3 data'
                          }
                        ],
                        ipv4_enabled: true,
                        require_ssl: true
                      },
                      tier: 'test tier#2 data'
                    })
                    project 'test project#2 data'
                    credential 'mycred'
                  end
                MANIFEST
              ) do |recipe_name|
                runner.converge(recipe_name) do
                  cred = Google::CredentialResourceMock.new('mycred',
                                                            runner.run_context)
                  runner.resource_collection.insert(cred)
                end
              end
            end

            context 'gsql_instance[title0]' do
              subject do
                chef_run.find_resource(:gsql_instance, 'title0')
              end

              it { is_expected.to have_attributes(backend_type: 'FIRST_GEN') }

              it { is_expected.to have_attributes(connection_name: 'test connection_name#0 data') }

              it { is_expected.to have_attributes(database_version: 'MYSQL_5_5') }

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'failoverReplica' do
              #   # Add test code here
              # end

              it { is_expected.to have_attributes(instance_type: 'CLOUD_SQL_INSTANCE') }

              it { is_expected.to have_attributes(ipv6_address: 'test ipv6_address#0 data') }

              it do
                is_expected
                  .to have_attributes(master_instance_name: 'test master_instance_name#0 data')
              end

              it { is_expected.to have_attributes(max_disk_size: 399_168_897) }

              it { is_expected.to have_attributes(i_label: 'test name#0 data') }

              it { is_expected.to have_attributes(region: 'test region#0 data') }

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'replicaConfiguration' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'settings' do
              #   # Add test code here
              # end
            end

            context 'gsql_instance[title1]' do
              subject do
                chef_run.find_resource(:gsql_instance, 'title1')
              end

              it { is_expected.to have_attributes(backend_type: 'SECOND_GEN') }

              it { is_expected.to have_attributes(connection_name: 'test connection_name#1 data') }

              it { is_expected.to have_attributes(database_version: 'MYSQL_5_6') }

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'failoverReplica' do
              #   # Add test code here
              # end

              it { is_expected.to have_attributes(instance_type: 'ON_PREMISES_INSTANCE') }

              it { is_expected.to have_attributes(ipv6_address: 'test ipv6_address#1 data') }

              it do
                is_expected
                  .to have_attributes(master_instance_name: 'test master_instance_name#1 data')
              end

              it { is_expected.to have_attributes(max_disk_size: 798_337_795) }

              it { is_expected.to have_attributes(i_label: 'test name#1 data') }

              it { is_expected.to have_attributes(region: 'test region#1 data') }

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'replicaConfiguration' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'settings' do
              #   # Add test code here
              # end
            end

            context 'gsql_instance[title2]' do
              subject do
                chef_run.find_resource(:gsql_instance, 'title2')
              end

              it { is_expected.to have_attributes(backend_type: 'EXTERNAL') }

              it { is_expected.to have_attributes(connection_name: 'test connection_name#2 data') }

              it { is_expected.to have_attributes(database_version: 'MYSQL_5_7') }

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'failoverReplica' do
              #   # Add test code here
              # end

              it { is_expected.to have_attributes(instance_type: 'READ_REPLICA_INSTANCE') }

              it { is_expected.to have_attributes(ipv6_address: 'test ipv6_address#2 data') }

              it do
                is_expected
                  .to have_attributes(master_instance_name: 'test master_instance_name#2 data')
              end

              it { is_expected.to have_attributes(max_disk_size: 1_197_506_692) }

              it { is_expected.to have_attributes(i_label: 'test name#2 data') }

              it { is_expected.to have_attributes(region: 'test region#2 data') }

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'replicaConfiguration' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'settings' do
              #   # Add test code here
              # end
            end
          end

          # Ensure present: resource exists, no change, has name, fail
          context 'title != name (fail)' do
            # TODO(alexstephen): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end
      end

      # Ensure present: resource exists, changes
      context 'changes == action' do
        # Ensure present: resource exists, changes, no name
        context 'title == name' do
          # Ensure present: resource exists, changes, no name, pass
          context 'title == name (pass)' do
            # TODO(alexstephen): Implement new test format.
          end

          # Ensure present: resource exists, changes, no name, fail
          context 'title == name (fail)' do
            # TODO(alexstephen): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end

        # Ensure present: resource exists, changes, has name
        context 'title != name' do
          # Ensure present: resource exists, changes, has name, pass
          context 'title != name (pass)' do
            # TODO(alexstephen): Implement new test format
          end

          # Ensure present: resource exists, changes, has name, fail
          context 'title != name (fail)' do
            # TODO(alexstephen): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end
      end
    end

    context 'resource missing' do
      # Ensure present: resource missing, ignore, no name
      context 'title == name' do
        # Ensure present: resource missing, ignore, no name, pass
        context 'title == name (pass)' do
          before do
            # rubocop:disable Metrics/LineLength
            expect_network_get_failed 1, name: 'title0'
            expect_network_create \
              1,
              {
                'kind' => 'sql#instance',
                'backendType' => 'FIRST_GEN',
                'connectionName' => 'test connection_name#0 data',
                'databaseVersion' => 'MYSQL_5_5',
                'failoverReplica' => {
                  'available' => true,
                  'name' => 'test name#0 data'
                },
                'instanceType' => 'CLOUD_SQL_INSTANCE',
                'ipv6Address' => 'test ipv6_address#0 data',
                'masterInstanceName' => 'test master_instance_name#0 data',
                'maxDiskSize' => 399_168_897,
                'name' => 'title0',
                'region' => 'test region#0 data',
                'replicaConfiguration' => {
                  'failoverTarget' => true,
                  'mysqlReplicaConfiguration' => {
                    'caCertificate' => 'test ca_certificate#0 data',
                    'clientCertificate' => 'test client_certificate#0 data',
                    'clientKey' => 'test client_key#0 data',
                    'connectRetryInterval' => 586_223_489,
                    'dumpFilePath' => 'test dump_file_path#0 data',
                    'masterHeartbeatPeriod' => 2_641_537_687,
                    'password' => 'test password#0 data',
                    'sslCipher' => 'test ssl_cipher#0 data',
                    'username' => 'test username#0 data',
                    'verifyServerCertificate' => true
                  },
                  'replicaNames' => %w[ee ff gg hh],
                  'serviceAccountEmailAddress' => 'test service_account_email_address#0 data'
                },
                'settings' => {
                  'ipConfiguration' => {
                    'ipv4Enabled' => true,
                    'authorizedNetworks' => [
                      {
                        'expirationTime' => '2018-07-08T02:10:16+00:00',
                        'name' => 'test name#0 data',
                        'value' => 'test value#0 data'
                      },
                      {
                        'expirationTime' => '2067-01-12T04:20:32+00:00',
                        'name' => 'test name#1 data',
                        'value' => 'test value#1 data'
                      },
                      {
                        'expirationTime' => '2115-07-20T06:30:48+00:00',
                        'name' => 'test name#2 data',
                        'value' => 'test value#2 data'
                      }
                    ],
                    'requireSsl' => true
                  },
                  'tier' => 'test tier#0 data'
                }
              },
              name: 'title0'
            expect_network_get_async 1, name: 'title0'
            # rubocop:enable Metrics/LineLength
          end

          let(:runner) do
            # This path ensures that the current cookbook is
            # loaded for testing.
            # This path will load all other cookbooks in the
            # parent directory.
            # Under most circumstances, this will include the
            # real google-gauth cookbook.
            parent_dir = File.join(File.dirname(__FILE__), '..', '..')
            cookbook_paths = [parent_dir]

            # If there's no real version of the google-gauth ,
            # add in the mocked version so that the tests do not fail.
            # Since cookbooks can have any name, we assume that
            # any directory with the word auth is the google-gauth cookbook.
            cookbook_paths << File.join(File.dirname(__FILE__), 'cookbooks')

            ChefSpec::SoloRunner.new(
              step_into: 'gsql_instance',
              cookbook_path: cookbook_paths,
              platform: 'ubuntu',
              version: '16.04'
            )
          end

          let(:chef_run) do
            apply_recipe(
              <<-MANIFEST
                gsql_instance 'title0' do
                  action :create
                  backend_type 'FIRST_GEN'
                  connection_name 'test connection_name#0 data'
                  database_version 'MYSQL_5_5'
                  failover_replica({
                    available: true,
                    name: 'test name#0 data'
                  })
                  instance_type 'CLOUD_SQL_INSTANCE'
                  ipv6_address 'test ipv6_address#0 data'
                  master_instance_name 'test master_instance_name#0 data'
                  max_disk_size 399168897
                  region 'test region#0 data'
                  replica_configuration({
                    failover_target: true,
                    mysql_replica_configuration: {
                      ca_certificate: 'test ca_certificate#0 data',
                      client_certificate: 'test client_certificate#0 data',
                      client_key: 'test client_key#0 data',
                      connect_retry_interval: 586223489,
                      dump_file_path: 'test dump_file_path#0 data',
                      master_heartbeat_period: 2641537687,
                      password: 'test password#0 data',
                      ssl_cipher: 'test ssl_cipher#0 data',
                      username: 'test username#0 data',
                      verify_server_certificate: true
                    },
                    replica_names: ['ee', 'ff', 'gg', 'hh'],
                    service_account_email_address: 'test service_account_email_address#0 data'
                  })
                  settings({
                    ip_configuration: {
                      authorized_networks: [
                        {
                          expiration_time: '2018-07-08T02:10:16+00:00',
                          name: 'test name#0 data',
                          value: 'test value#0 data'
                        },
                        {
                          expiration_time: '2067-01-12T04:20:32+00:00',
                          name: 'test name#1 data',
                          value: 'test value#1 data'
                        },
                        {
                          expiration_time: '2115-07-20T06:30:48+00:00',
                          name: 'test name#2 data',
                          value: 'test value#2 data'
                        }
                      ],
                      ipv4_enabled: true,
                      require_ssl: true
                    },
                    tier: 'test tier#0 data'
                  })
                  project 'test project#0 data'
                  credential 'mycred'
                end
              MANIFEST
            ) do |recipe_name|
              runner.converge(recipe_name) do
                cred = Google::CredentialResourceMock.new('mycred',
                                                          runner.run_context)
                runner.resource_collection.insert(cred)
              end
            end
          end

          subject do
            chef_run.find_resource(:gsql_instance, 'title0')
          end

          it 'should run test correctly' do
            expect(chef_run).to create(:gsql_instance,
                                       'title0')
          end
          it { is_expected.to have_attributes(backend_type: 'FIRST_GEN') }

          it { is_expected.to have_attributes(connection_name: 'test connection_name#0 data') }

          it { is_expected.to have_attributes(database_version: 'MYSQL_5_5') }

          # TODO(nelsonjr): Implement complex nested property object test.
          # it 'failoverReplica' do
          #   # Add test code here
          # end

          it { is_expected.to have_attributes(instance_type: 'CLOUD_SQL_INSTANCE') }

          it { is_expected.to have_attributes(ipv6_address: 'test ipv6_address#0 data') }

          it do
            is_expected.to have_attributes(master_instance_name: 'test master_instance_name#0 data')
          end

          it { is_expected.to have_attributes(max_disk_size: 399_168_897) }

          it { is_expected.to have_attributes(i_label: 'title0') }

          it { is_expected.to have_attributes(region: 'test region#0 data') }

          # TODO(nelsonjr): Implement complex nested property object test.
          # it 'replicaConfiguration' do
          #   # Add test code here
          # end

          # TODO(nelsonjr): Implement complex nested property object test.
          # it 'settings' do
          #   # Add test code here
          # end
        end

        # Ensure present: resource missing, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(alexstephen): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end

      # Ensure present: resource missing, ignore, has name
      context 'title != name' do
        # Ensure present: resource missing, ignore, has name, pass
        context 'title != name (pass)' do
          before do
            # rubocop:disable Metrics/LineLength
            expect_network_get_failed 1
            expect_network_create \
              1,
              'kind' => 'sql#instance',
              'backendType' => 'FIRST_GEN',
              'connectionName' => 'test connection_name#0 data',
              'databaseVersion' => 'MYSQL_5_5',
              'failoverReplica' => {
                'available' => true,
                'name' => 'test name#0 data'
              },
              'instanceType' => 'CLOUD_SQL_INSTANCE',
              'ipv6Address' => 'test ipv6_address#0 data',
              'masterInstanceName' => 'test master_instance_name#0 data',
              'maxDiskSize' => 399_168_897,
              'name' => 'test name#0 data',
              'region' => 'test region#0 data',
              'replicaConfiguration' => {
                'failoverTarget' => true,
                'mysqlReplicaConfiguration' => {
                  'caCertificate' => 'test ca_certificate#0 data',
                  'clientCertificate' => 'test client_certificate#0 data',
                  'clientKey' => 'test client_key#0 data',
                  'connectRetryInterval' => 586_223_489,
                  'dumpFilePath' => 'test dump_file_path#0 data',
                  'masterHeartbeatPeriod' => 2_641_537_687,
                  'password' => 'test password#0 data',
                  'sslCipher' => 'test ssl_cipher#0 data',
                  'username' => 'test username#0 data',
                  'verifyServerCertificate' => true
                },
                'replicaNames' => %w[ee ff gg hh],
                'serviceAccountEmailAddress' => 'test service_account_email_address#0 data'
              },
              'settings' => {
                'ipConfiguration' => {
                  'ipv4Enabled' => true,
                  'authorizedNetworks' => [
                    {
                      'expirationTime' => '2018-07-08T02:10:16+00:00',
                      'name' => 'test name#0 data',
                      'value' => 'test value#0 data'
                    },
                    {
                      'expirationTime' => '2067-01-12T04:20:32+00:00',
                      'name' => 'test name#1 data',
                      'value' => 'test value#1 data'
                    },
                    {
                      'expirationTime' => '2115-07-20T06:30:48+00:00',
                      'name' => 'test name#2 data',
                      'value' => 'test value#2 data'
                    }
                  ],
                  'requireSsl' => true
                },
                'tier' => 'test tier#0 data'
              }
            expect_network_get_async 1
            # rubocop:enable Metrics/LineLength
          end

          let(:runner) do
            # This path ensures that the current cookbook is
            # loaded for testing.
            # This path will load all other cookbooks in the
            # parent directory.
            # Under most circumstances, this will include the
            # real google-gauth cookbook.
            parent_dir = File.join(File.dirname(__FILE__), '..', '..')
            cookbook_paths = [parent_dir]

            # If there's no real version of the google-gauth ,
            # add in the mocked version so that the tests do not fail.
            # Since cookbooks can have any name, we assume that
            # any directory with the word auth is the google-gauth cookbook.
            cookbook_paths << File.join(File.dirname(__FILE__), 'cookbooks')

            ChefSpec::SoloRunner.new(
              step_into: 'gsql_instance',
              cookbook_path: cookbook_paths,
              platform: 'ubuntu',
              version: '16.04'
            )
          end

          let(:chef_run) do
            apply_recipe(
              <<-MANIFEST
                gsql_instance 'title0' do
                  action :create
                  backend_type 'FIRST_GEN'
                  connection_name 'test connection_name#0 data'
                  database_version 'MYSQL_5_5'
                  failover_replica({
                    available: true,
                    name: 'test name#0 data'
                  })
                  i_label 'test name#0 data'
                  instance_type 'CLOUD_SQL_INSTANCE'
                  ipv6_address 'test ipv6_address#0 data'
                  master_instance_name 'test master_instance_name#0 data'
                  max_disk_size 399168897
                  region 'test region#0 data'
                  replica_configuration({
                    failover_target: true,
                    mysql_replica_configuration: {
                      ca_certificate: 'test ca_certificate#0 data',
                      client_certificate: 'test client_certificate#0 data',
                      client_key: 'test client_key#0 data',
                      connect_retry_interval: 586223489,
                      dump_file_path: 'test dump_file_path#0 data',
                      master_heartbeat_period: 2641537687,
                      password: 'test password#0 data',
                      ssl_cipher: 'test ssl_cipher#0 data',
                      username: 'test username#0 data',
                      verify_server_certificate: true
                    },
                    replica_names: ['ee', 'ff', 'gg', 'hh'],
                    service_account_email_address: 'test service_account_email_address#0 data'
                  })
                  settings({
                    ip_configuration: {
                      authorized_networks: [
                        {
                          expiration_time: '2018-07-08T02:10:16+00:00',
                          name: 'test name#0 data',
                          value: 'test value#0 data'
                        },
                        {
                          expiration_time: '2067-01-12T04:20:32+00:00',
                          name: 'test name#1 data',
                          value: 'test value#1 data'
                        },
                        {
                          expiration_time: '2115-07-20T06:30:48+00:00',
                          name: 'test name#2 data',
                          value: 'test value#2 data'
                        }
                      ],
                      ipv4_enabled: true,
                      require_ssl: true
                    },
                    tier: 'test tier#0 data'
                  })
                  project 'test project#0 data'
                  credential 'mycred'
                end
              MANIFEST
            ) do |recipe_name|
              runner.converge(recipe_name) do
                cred = Google::CredentialResourceMock.new('mycred',
                                                          runner.run_context)
                runner.resource_collection.insert(cred)
              end
            end
          end

          subject do
            chef_run.find_resource(:gsql_instance, 'title0')
          end

          it 'should run test correctly' do
            expect(chef_run).to create(:gsql_instance,
                                       'title0')
          end
          it { is_expected.to have_attributes(backend_type: 'FIRST_GEN') }

          it { is_expected.to have_attributes(connection_name: 'test connection_name#0 data') }

          it { is_expected.to have_attributes(database_version: 'MYSQL_5_5') }

          # TODO(nelsonjr): Implement complex nested property object test.
          # it 'failoverReplica' do
          #   # Add test code here
          # end

          it { is_expected.to have_attributes(instance_type: 'CLOUD_SQL_INSTANCE') }

          it { is_expected.to have_attributes(ipv6_address: 'test ipv6_address#0 data') }

          it do
            is_expected.to have_attributes(master_instance_name: 'test master_instance_name#0 data')
          end

          it { is_expected.to have_attributes(max_disk_size: 399_168_897) }

          it { is_expected.to have_attributes(i_label: 'test name#0 data') }

          it { is_expected.to have_attributes(region: 'test region#0 data') }

          # TODO(nelsonjr): Implement complex nested property object test.
          # it 'replicaConfiguration' do
          #   # Add test code here
          # end

          # TODO(nelsonjr): Implement complex nested property object test.
          # it 'settings' do
          #   # Add test code here
          # end
        end

        # Ensure present: resource missing, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(alexstephen): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end
  end

  context 'ensure == absent' do
    context 'resource missing' do
      # Ensure absent: resource missing, ignore, no name
      context 'title == name' do
        # Ensure absent: resource missing, ignore, no name, pass
        context 'title == name (pass)' do
          before do
            expect_network_get_failed 1, name: 'title0'
          end

          let(:runner) do
            # This path ensures that the current cookbook is
            # loaded for testing.
            # This path will load all other cookbooks in the
            # parent directory.
            # Under most circumstances, this will include the
            # real google-gauth cookbook.
            parent_dir = File.join(File.dirname(__FILE__), '..', '..')
            cookbook_paths = [parent_dir]

            # If there's no real version of the google-gauth ,
            # add in the mocked version so that the tests do not fail.
            # Since cookbooks can have any name, we assume that
            # any directory with the word auth is the google-gauth cookbook.
            cookbook_paths << File.join(File.dirname(__FILE__), 'cookbooks')

            ChefSpec::SoloRunner.new(
              step_into: 'gsql_instance',
              cookbook_path: cookbook_paths,
              platform: 'ubuntu',
              version: '16.04'
            )
          end

          let(:chef_run) do
            apply_recipe(
              <<-MANIFEST
                gsql_instance 'title0' do
                  action :delete
                  project 'test project#0 data'
                  credential 'mycred'
                end
              MANIFEST
            ) do |recipe_name|
              runner.converge(recipe_name) do
                cred = Google::CredentialResourceMock.new('mycred',
                                                          runner.run_context)
                runner.resource_collection.insert(cred)
              end
            end
          end

          subject do
            chef_run.find_resource(:gsql_instance, 'title0')
          end
        end

        # Ensure absent: resource missing, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(alexstephen): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end

      # Ensure absent: resource missing, ignore, has name
      context 'title != name' do
        # Ensure absent: resource missing, ignore, has name, pass
        context 'title != name (pass)' do
          before do
            expect_network_get_failed 1
          end

          let(:runner) do
            # This path ensures that the current cookbook is
            # loaded for testing.
            # This path will load all other cookbooks in the
            # parent directory.
            # Under most circumstances, this will include the
            # real google-gauth cookbook.
            parent_dir = File.join(File.dirname(__FILE__), '..', '..')
            cookbook_paths = [parent_dir]

            # If there's no real version of the google-gauth ,
            # add in the mocked version so that the tests do not fail.
            # Since cookbooks can have any name, we assume that
            # any directory with the word auth is the google-gauth cookbook.
            cookbook_paths << File.join(File.dirname(__FILE__), 'cookbooks')

            ChefSpec::SoloRunner.new(
              step_into: 'gsql_instance',
              cookbook_path: cookbook_paths,
              platform: 'ubuntu',
              version: '16.04'
            )
          end

          let(:chef_run) do
            apply_recipe(
              <<-MANIFEST
                gsql_instance 'title0' do
                  action :delete
                  i_label 'test name#0 data'
                  project 'test project#0 data'
                  credential 'mycred'
                end
              MANIFEST
            ) do |recipe_name|
              runner.converge(recipe_name) do
                cred = Google::CredentialResourceMock.new('mycred',
                                                          runner.run_context)
                runner.resource_collection.insert(cred)
              end
            end
          end

          subject do
            chef_run.find_resource(:gsql_instance, 'title0')
          end
        end

        # Ensure absent: resource missing, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(alexstephen): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end

    context 'resource exists' do
      # Ensure absent: resource exists, ignore, no name
      context 'title == name' do
        # Ensure absent: resource exists, ignore, no name, pass
        context 'title == name (pass)' do
          before do
            expect_network_get_success 1, name: 'title0'
            expect_network_delete 1, 'title0'
            expect_network_get_async 1, name: 'title0'
          end

          let(:runner) do
            # This path ensures that the current cookbook is
            # loaded for testing.
            # This path will load all other cookbooks in the
            # parent directory.
            # Under most circumstances, this will include the
            # real google-gauth cookbook.
            parent_dir = File.join(File.dirname(__FILE__), '..', '..')
            cookbook_paths = [parent_dir]

            # If there's no real version of the google-gauth ,
            # add in the mocked version so that the tests do not fail.
            # Since cookbooks can have any name, we assume that
            # any directory with the word auth is the google-gauth cookbook.
            cookbook_paths << File.join(File.dirname(__FILE__), 'cookbooks')

            ChefSpec::SoloRunner.new(
              step_into: 'gsql_instance',
              cookbook_path: cookbook_paths,
              platform: 'ubuntu',
              version: '16.04'
            )
          end

          let(:chef_run) do
            apply_recipe(
              <<-MANIFEST
                gsql_instance 'title0' do
                  action :delete
                  project 'test project#0 data'
                  credential 'mycred'
                end
              MANIFEST
            ) do |recipe_name|
              runner.converge(recipe_name) do
                cred = Google::CredentialResourceMock.new('mycred',
                                                          runner.run_context)
                runner.resource_collection.insert(cred)
              end
            end
          end

          subject do
            chef_run.find_resource(:gsql_instance, 'title0')
          end

          it 'should run test correctly' do
            expect(chef_run).to delete(:gsql_instance,
                                       'title0')
          end
        end

        # Ensure absent: resource exists, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(alexstephen): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
      # Ensure absent: resource exists, ignore, has name
      context 'title != name' do
        # Ensure absent: resource exists, ignore, has name, pass
        context 'title != name (pass)' do
          before do
            expect_network_get_success 1
            expect_network_delete 1
            expect_network_get_async 1
          end

          let(:runner) do
            # This path ensures that the current cookbook is
            # loaded for testing.
            # This path will load all other cookbooks in the
            # parent directory.
            # Under most circumstances, this will include the
            # real google-gauth cookbook.
            parent_dir = File.join(File.dirname(__FILE__), '..', '..')
            cookbook_paths = [parent_dir]

            # If there's no real version of the google-gauth ,
            # add in the mocked version so that the tests do not fail.
            # Since cookbooks can have any name, we assume that
            # any directory with the word auth is the google-gauth cookbook.
            cookbook_paths << File.join(File.dirname(__FILE__), 'cookbooks')

            ChefSpec::SoloRunner.new(
              step_into: 'gsql_instance',
              cookbook_path: cookbook_paths,
              platform: 'ubuntu',
              version: '16.04'
            )
          end

          let(:chef_run) do
            apply_recipe(
              <<-MANIFEST
                gsql_instance 'title0' do
                  action :delete
                  i_label 'test name#0 data'
                  project 'test project#0 data'
                  credential 'mycred'
                end
              MANIFEST
            ) do |recipe_name|
              runner.converge(recipe_name) do
                cred = Google::CredentialResourceMock.new('mycred',
                                                          runner.run_context)
                runner.resource_collection.insert(cred)
              end
            end
          end

          subject do
            chef_run.find_resource(:gsql_instance, 'title0')
          end

          it 'should run test correctly' do
            expect(chef_run).to delete(:gsql_instance,
                                       'title0')
          end
        end

        # Ensure absent: resource exists, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(alexstephen): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end
  end

  def expand_variables(template, data, extra_data = {})
    Google::GSQL::Instance
      .action_class.expand_variables(template, data, extra_data)
  end

  def expect_network_get_success(id, data = {})
    id_data = data.fetch(:name, '').include?('title') ? 'title' : 'name'
    body = load_network_result("success#{id}~#{id_data}.yaml").to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! GET #{self_link(uri_data(id).merge(data))}"
    expect(Google::Sql::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET #{args}"
      request
    end
  end

  def http_success(body)
    response = Net::HTTPOK.new(1.0, 200, 'OK')
    response.body = body
    response.instance_variable_set(:@read, true)
    response
  end

  def expect_network_get_async(id, data = {})
    body = { kind: 'sql#instance' }.to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! #{self_link(uri_data(id).merge(data))}"
    expect(Google::Sql::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET <async> #{args}"
      request
    end
  end

  def expect_network_get_failed(id, data = {})
    request = double('request')
    allow(request).to receive(:send).and_return(http_failed_object_missing)

    debug_network "!! #{self_link(uri_data(id).merge(data))}"
    expect(Google::Sql::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET [failed] #{args}"
      request
    end
  end

  def http_failed_object_missing
    Net::HTTPNotFound.new(1.0, 404, 'Not Found')
  end

  def expect_network_create(id, expected_body, data = {})
    merged_uri = uri_data(id).merge(data)
    body = { kind: 'sql#operation',
             status: 'DONE', targetLink: self_link(merged_uri) }.to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! POST #{collection(merged_uri)}"
    expect(Google::Sql::Network::Post).to receive(:new)
      .with(collection(merged_uri), instance_of(Google::FakeAuthorization),
            'application/json', expected_body.to_json) do |args|
      debug_network ">> POST #{args} = body(#{body})"
      request
    end
  end

  def expect_network_delete(id, name = nil, data = {})
    delete_data = uri_data(id).merge(data)
    delete_data[:name] = name unless name.nil?
    body = { kind: 'sql#operation',
             status: 'DONE',
             targetLink: self_link(delete_data) }.to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! DELETE #{self_link(delete_data)}"
    expect(Google::Sql::Network::Delete).to receive(:new)
      .with(self_link(delete_data),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> DELETE #{args}"
      request
    end
  end

  def load_network_result(file)
    results = File.join(File.dirname(__FILE__), 'data', 'network',
                        'gsql_instance', file)
    debug("Loading result file: #{results}")
    raise "Network result data file #{results}" unless File.exist?(results)
    data = YAML.safe_load(File.read(results))
    raise "Invalid network results #{results}" unless data.class <= Hash
    data
  end

  def debug(message)
    puts(message) if ENV['RSPEC_DEBUG']
  end

  def debug_network(message)
    puts("Network #{message}") \
      if ENV['RSPEC_DEBUG'] || ENV['RSPEC_HTTP_VERBOSE']
  end

  def collection(data)
    URI.join(
      'https://www.googleapis.com/sql/v1beta4/',
      expand_variables(
        'projects/{{project}}/instances',
        data
      )
    )
  end

  def self_link(data)
    URI.join(
      'https://www.googleapis.com/sql/v1beta4/',
      expand_variables(
        'projects/{{project}}/instances/{{name}}',
        data
      )
    )
  end

  # Creates variable test data to comply with self_link URI parameters
  def uri_data(id)
    {
      project: GoogleTests::Constants::I_PROJECT_DATA[(id - 1) \
        % GoogleTests::Constants::I_PROJECT_DATA.size],
      name: GoogleTests::Constants::I_NAME_DATA[(id - 1) \
        % GoogleTests::Constants::I_NAME_DATA.size]
    }
  end

  def build_cred
    <<-CRED
    gauth_credential 'mycred' do
      action :serviceaccount
      path '/home'
      scopes [
        'test_path'
      ]
    end
    CRED
  end

  # Creates a test recipe file and runs a block before destroying the file
  def apply_recipe(recipe)
    # Creates a random string name
    recipe_name = "recipe~test~#{(0...8).map { (65 + rand(26)).chr }.join}"
    recipe_loc = File.join(File.dirname(__FILE__), '..', 'recipes',
                           "#{recipe_name}.rb")

    File.open(recipe_loc, 'w') do |file|
      file.write([build_cred, recipe].join("\n"))
    end
    recipe_path = "google-gsql::#{recipe_name}"
    begin
      yield recipe_path
    ensure
      File.delete(recipe_loc)
    end
  end
end
